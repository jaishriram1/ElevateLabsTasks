import java.util.ArrayList;
import java.util.Scanner;

public class StudentRecordManagementSystem {

    // Nested static class for Student
    static class Student {
        private int id;
        private String name;
        private double marks;

        public Student(int id, String name, double marks) {
            this.id = id;
            this.name = name;
            this.marks = marks;
        }

        // Getters and Setters
        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public double getMarks() {
            return marks;
        }

        public void setMarks(double marks) {
            this.marks = marks;
        }

        @Override
        public String toString() {
            return "ID: " + id + ", Name: " + name + ", Marks: " + marks;
        }
    }

    private static ArrayList<Student> studentList = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int choice;
        do {
            showMenu();
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    addStudent();
                    break;
                case 2:
                    viewStudents();
                    break;
                case 3:
                    updateStudent();
                    break;
                case 4:
                    deleteStudent();
                    break;
                case 5:
                    System.out.println("Exiting system. Goodbye! üëã");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 5);
        scanner.close();
    }

    private static void showMenu() {
        System.out.println("\n--- Student Record Management System ---");
        System.out.println("1. Add Student");
        System.out.println("2. View All Students");
        System.out.println("3. Update Student");
        System.out.println("4. Delete Student");
        System.out.println("5. Exit");
        System.out.println("----------------------------------------");
    }

    private static void addStudent() {
        System.out.print("Enter Student ID: ");
        int id = scanner.nextInt();
        scanner.nextLine();
        System.out.print("Enter Student Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Student Marks: ");
        double marks = scanner.nextDouble();
        scanner.nextLine();

        Student newStudent = new Student(id, name, marks);
        studentList.add(newStudent);
        System.out.println("Student added successfully! üéâ");
    }

    private static void viewStudents() {
        if (studentList.isEmpty()) {
            System.out.println("No students in the record.");
        } else {
            System.out.println("\n--- All Student Records ---");
            for (Student student : studentList) {
                System.out.println(student);
            }
        }
    }

    private static void updateStudent() {
        System.out.print("Enter Student ID to update: ");
        int idToUpdate = scanner.nextInt();
        scanner.nextLine();

        for (Student student : studentList) {
            if (student.getId() == idToUpdate) {
                System.out.print("Enter new Name (current: " + student.getName() + "): ");
                String newName = scanner.nextLine();
                if (!newName.isEmpty()) {
                    student.setName(newName);
                }

                System.out.print("Enter new Marks (current: " + student.getMarks() + "): ");
                String newMarksStr = scanner.nextLine();
                if (!newMarksStr.isEmpty()) {
                    try {
                        double newMarks = Double.parseDouble(newMarksStr);
                        student.setMarks(newMarks);
                    } catch (NumberFormatException e) {
                        System.out.println("Invalid marks format. Marks not updated.");
                    }
                }
                System.out.println("Student record updated successfully! ‚úÖ");
                return;
            }
        }
        System.out.println("Student with ID " + idToUpdate + " not found. üòî");
    }

    private static void deleteStudent() {
        System.out.print("Enter Student ID to delete: ");
        int idToDelete = scanner.nextInt();
        scanner.nextLine();

        Student studentToRemove = null;
        for (Student student : studentList) {
            if (student.getId() == idToDelete) {
                studentToRemove = student;
                break;
            }
        }

        if (studentToRemove != null) {
            studentList.remove(studentToRemove);
            System.out.println("Student with ID " + idToDelete + " deleted successfully! üóëÔ∏è");
        } else {
            System.out.println("Student with ID " + idToDelete + " not found. üò¢");
        }
    }
}
